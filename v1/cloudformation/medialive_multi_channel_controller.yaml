#### Title : MediaLive Multi-Channel Controller
#### Author : Scott Cunningham
#### 
####
## Parameters - User Input
Parameters:
  DeploymentName:
    Description: This is the name of the deployment
    Type: String
    MinLength: 1

  #HTMLPath:
  #  Description: This is the path where you would like the HTML pages stored
  #  Type: String
  #  AllowedPattern: "^(^[a-z,A-Z,0-9].*/$)|(^$)"
  #  ConstraintDescription: path can't start with a slash; it must end with a slash or be empty.

## Resources
Resources:
  #################
  ## S3
  #################

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: DeploymentName
          Value: !Ref DeploymentName

  #################
  ## IAM & Permissions
  #################
  ## IAM Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub ${DeploymentName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: DeploymentName
          Value: !Ref DeploymentName

  ## IAM Policy
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LambdaRole
      PolicyName: !Sub ${DeploymentName}-s3-access
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - events:*
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - arn:aws:iam::*:role/AWS_Events_Invoke_Targets
          - Effect: Allow
            Action:
              - cloudwatch:GetMetricData
              - cloudwatch:GetMetricStatistics
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - medialive:*
            Resource:
                - '*'
          - Effect: Allow
            Action:
              - execute-api:Invoke
              - execute-api:ManageConnections
            Resource:
              - arn:aws:execute-api:*:*:*
    DependsOn: S3Bucket

  LambdaInvokePermissionAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MediaLiveControlFunctions.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      #ArnLike: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStage}/*
    DependsOn:
      - MediaLiveControlFunctions

  LambdaInvokePermissionAPIHandlerAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MediaLiveControlConfig.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      #ArnLike: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStage}/*
    DependsOn:
      - MediaLiveControlConfig

  LambdaInvokePermissionS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThumbnailS3PutRename.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt S3Bucket.Arn
    DependsOn:
      - S3Bucket
      - ThumbnailS3PutRename

  LambdaInvokePermissionEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MediaLiveCWatchEventsThumbUpdate.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt MediaLiveStateChange.Arn
    DependsOn:
      - ThumbnailS3PutRename
      - MediaLiveStateChange

  #################
  ## Custom Resource
  #################

  FileMover:
    Type: Custom::LambdaInvokerToMoveFiles
    Properties:
      ServiceToken: !GetAtt FileCopier.Arn
      Region: !Ref 'AWS::Region'
    DependsOn:
      - S3Bucket
      - LambdaRole

  S3PutEvent:
    Type: Custom::LambdaToPutS3BucketNotification
    Properties:
      ServiceToken: !GetAtt S3BucketNotificationLambda.Arn
      Region: !Ref 'AWS::Region'
      Bucket: !Ref S3Bucket
      Prefix: !GetAtt FileMover.unique_thumb_name
      LambdaArn: !GetAtt ThumbnailS3PutRename.Arn
    DependsOn:
      - S3Bucket
      - LambdaRole
      - S3AccessPolicy
      - ThumbnailS3PutRename
      - FileMover

  #################
  ## Lambda
  #################
  MediaLiveControlFunctions:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: MediaLive Boto3 Control actions
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.medialive-control-functions
      Tags:
        - Key: DeploymentName
          Value: !Ref DeploymentName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  MediaLiveControlConfig:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: Channel configuration API handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.medialive-control-config
      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
          CONFIG_KEY: !GetAtt FileMover.channel_map
          TEMPLATE_KEY: !GetAtt FileMover.channel_map_template
      Tags:
        - Key: DeploymentName
          Value: !Ref DeploymentName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  MediaLiveCWatchEventsThumbUpdate:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: CloudWatch events driven Lambda to modify status thumbnail for MediaLive Channels
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.medialive-cloudwatch-events-thumb-update
      Environment:
        Variables:
          SLATE_BUCKET: !Ref S3Bucket
          SLATE_KEY_STARTING: !GetAtt FileMover.starting
          SLATE_KEY_STOPPING: !GetAtt FileMover.stopping
          SLATE_KEY_STOPPED: !GetAtt FileMover.stopped
      Tags:
        - Key: DeploymentName
          Value: !Ref DeploymentName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  ThumbnailS3PutRename:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: S3 PUT Event driven Lambda to remove the incrementing filename of MediaLive Status thumbnails
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.jpg-s3-put-rename
      Tags:
        - Key: DeploymentName
          Value: !Ref DeploymentName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  FileCopier:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Sub ${DeploymentName}-medialive-html5-api-handler
      Description: Lambda function to copy solution files to destination bucket
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 30
      MemorySize: 10240
      Code:
        ZipFile: |
          '''
          Copyright (c) 2021 Scott Cunningham

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.

          Summary: This script is a custom resource to place the HTML pages and Lambda code into the destination bucket.

          Original Author: Scott Cunningham
          '''

          import json
          import logging
          import boto3
          import os
          import urllib3
          from urllib.parse import urlparse
          from zipfile import ZipFile
          import cfnresponse

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          MANIFESTMODIFY="True"

          def lambda_handler(event, context):

              ## Log the incoming event
              LOGGER.info("Event : %s " % (event))

              ## Create Response Data Dictionary for the CloudFormationn response
              responseData = dict()

              ## Initialize S3 boto3 client
              s3 = boto3.client('s3')

              # Create urllib3 pool manager
              http = urllib3.PoolManager()

              # environment variables
              bucket = os.environ['BUCKET']

              # Manifest File containning URL's on github
              cloudformation_manifest = "https://raw.githubusercontent.com/scunning1987/medialive_multi_channel_controller/main/manifest.txt"

              # Get the manifest from GitHub
              get_response = http.request('GET', cloudformation_manifest)

              if get_response.status != 200:
                  # Exit the script with errors
                  responseData['Status'] = "Unable to get file from location : %s " % (file)
                  cfnresponse.send(event, context, "FAILED",responseData)
                  raise Exception("Unable to get file from location : %s " % (file))
              else:
                  # Continue and upload to S3
                  manifest_list = get_response.data.decode("utf-8").split("\n")

              # remove manifest.txt header line
              manifest_list.pop(0)

              LOGGER.info("Files to transfer to S3: %s " % (manifest_list))

              for file in manifest_list:

                  # Get the file from GitHub
                  if "http" in file:
                      get_response = http.request('GET', file)

                  if get_response.status != 200:
                      # Exit the script with errors
                      responseData['Status'] = "Unable to get file from location : %s " % (file)
                      cfnresponse.send(event, context, "FAILED",responseData)
                      raise Exception("Unable to get file from location : %s " % (file))
                  elif "http" in file:

                      # Continue and upload to S3

                      # url string to urllib object
                      file_url_formatted = urlparse(file)
                      file_url_path = file_url_formatted.path

                      # get path after github repo owner name - use this as the path to write to s3
                      path = '/'.join(file_url_path.split("/")[2:]).rsplit("/",1)[0]
                      s3_data = get_response.data


                      file_name = file.rsplit("/",1)[1]
                      file_base_name = os.path.splitext(file_name)[0]
                      s3_key = "%s/%s" % (path,file_name)

                      content_type = ""
                      if ".html" in file_name:
                          content_type = "text/html"
                      elif ".css" in file_name:
                          content_type = "text/css"
                      elif ".js" in file_name:
                          content_type = "text/javascript"
                      elif "data.json" in file_name:
                          content_type = "application/json"
                      elif ".zip" in file_name: # this is the zip
                          content_type = "application/zip"
                          s3_key = path + file_name
                      elif ".py" in file_name:
                          # write python file to zip,
                          python_file = open("/tmp/"+file_name,"w")
                          python_file.write(get_response.data.decode("utf-8"))
                          python_file.close()

                          # Zip the file
                          LOGGER.info("Zipping the file : %s " % ("/tmp/"+file_name))
                          zipObj = ZipFile('/tmp/'+file_name.replace(".py",".zip"), 'w')
                          # Add file to the zip
                          zipObj.write('/tmp/'+file_name,"index.py")
                          # close the Zip File
                          zipObj.close()
                          LOGGER.info("Finished zipping file")

                          content_type = "application/zip"
                          s3_data = open("/tmp/"+file_name.replace(".py",".zip"), 'rb')
                          s3_key = s3_key.replace(".py",".zip")

                      # "RequestType": "Create"
                      if event['RequestType'] == "Create" or event['RequestType'] == "Update":
                          # Upload to S3
                          LOGGER.info("Now uploading %s to S3, Bucket: %s , path: %s" % (file_name,bucket,s3_key))
                          try:
                              s3_response = s3.put_object(Body=s3_data, Bucket=bucket, Key=s3_key,ContentType=content_type, ACL='public-read', CacheControl='no-cache')
                              LOGGER.info("Uploaded %s to S3, got response : %s " % (file_name,s3_response) )
                              responseData[file_base_name] = s3_key
                          except Exception as e:
                              LOGGER.error("Unable to upload %s to S3, got exception: %s" % (file_name,e))
                              responseData['Status'] = "Unable to upload %s to S3, got exception: %s" % (file_name,e)
                              cfnresponse.send(event, context, "FAILED",responseData)
                              raise Exception("Unable to upload %s to S3, got exception: %s" % (file_name,e))

                      else: # DELETE
                          try:
                              s3_response = s3.delete_object(Bucket=bucket,Key=s3_key)
                              LOGGER.info("Deleted %s from S3, got response : %s " % (file_name,s3_response) )
                          except Exception as e:
                              LOGGER.error("Unable to delete %s from S3, got exception: %s" % (file_name,e))
                              responseData['Status'] = "Unable to delete %s from S3, got exception: %s" % (file_name,e)
                              cfnresponse.send(event, context, "FAILED",responseData)
                  else:
                      LOGGER.info("Got line in manifest.txt that isn't a URL: %s " % (file))
              responseData['Status'] = "SUCCESS"
              cfnresponse.send(event, context, "SUCCESS",responseData)
              return responseData

      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
      Tags:
        - Key: DeploymentName
          Value: !Ref DeploymentName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - S3AccessPolicy

  S3BucketNotificationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |

          from __future__ import print_function
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          print('Loading function')
          s3 = boto3.resource('s3')
          object = s3.Object(event['ResourceProperties']['Bucket'],'status_thumbnails/status.txt')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      Bucket=event['ResourceProperties']['Bucket']
                      delete_notification(Bucket)
                      print("Sending response to custom resource after Delete")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print("Request Type:",event['RequestType'])
                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']
                      object.put(Body='status thumbnails directory')
                      Prefix=event['ResourceProperties']['Prefix'].rsplit("/",1)[0]
                      add_notification(LambdaArn, Bucket, Prefix)
                      object.delete()
                      responseData={'Bucket':Bucket}
                      print("Sending response to custom resource")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILED'
                  responseData = {'Failure': 'Something bad happened : %s .' % (e)}
              cfnresponse.send(event, context, responseStatus, responseData)

          def add_notification(LambdaArn, Bucket, Prefix):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                NotificationConfiguration={
                  'LambdaFunctionConfigurations': [
                    {
                        'LambdaFunctionArn': LambdaArn,
                        'Events': [
                            's3:ObjectCreated:*'
                        ],
                        'Filter':{'Key':{'FilterRules':[{'Name':'prefix','Value':Prefix}]}}
                    }
                  ]
                }
              )
              print("event notification put response: %s " % (response))
              print("Put request completed....")

          def delete_notification(Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                  NotificationConfiguration={}
              )
              print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50
    DependsOn:
      - S3Bucket
      - LambdaRole
      - S3AccessPolicy
      - ThumbnailS3PutRename
      - FileMover

  #################
  ## EventBridge
  #################

  MediaLiveStateChange:
    Type: AWS::Events::Rule
    Properties:
      Description: Event Bridge for MediaLive channel state changes
      EventPattern: {
        "source": [
            "aws.medialive",
            "lambda.amazonaws.com"
        ],
        "detail-type": [
            "MediaLive Channel State Change"
        ],
        "detail": {
          "state": [
              "STARTING",
              "STOPPING",
              "STOPPED"
          ]
        }
      }
      Targets:
        - Arn: !GetAtt MediaLiveCWatchEventsThumbUpdate.Arn
          Id: MediaLiveCWatchEventsThumbUpdate

  #################
  ## API Gateway
  #################

#################################
# Outputs
#################################

Outputs:
  DashboardUrl:
    Description: Dashboard URL for MediaLive control
    Value: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/${FileMover.ui}

  APIEndpointURLGetSample:
    Description: API Endpoint for getting sample configuration
    Value: https://ApiGateway.execute-api.AWSRegion.amazonaws.com/ApiStage/sample-configuration
    #Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/sample-configuration

  APIEndpointURL:
    Description: API Endpoint for getting current config (GET), and updating config (PUT)
    Value: https://ApiGateway.execute-api.AWSRegion.amazonaws.com/ApiStage/configuration
    #Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/configuration

  ThumbnailPublishingS3URI:
    Description: MediaLive needs to output thumbnails to this location
    Value: !Sub s3://${S3Bucket}/${FileMover.unique_thumb_name}